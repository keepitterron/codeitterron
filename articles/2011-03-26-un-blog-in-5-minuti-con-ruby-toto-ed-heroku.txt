title: un blog in 5 minuti con ruby, toto ed heroku
date: 26/03/2011

###Setup iniziale

Se Toto è incredibilmente facile da utilizzare e customizzare, vi è la naturale necessità di preparare il proprio ambiente di lavoro affinché tutto sia in ordine per il deploy finale.
In particolare avremo bisogno di <a href="http://www.ruby-lang.org">Ruby</a> e RubyGems per installare e lanciare Toto e di Git per fare il deploy su Heroku.
Ruby è - ovviamente - il linguaggio di programmazione di Toto e Git è un __"distributed version control system"__ usato per tenere traccia dei cambiamenti e fare il deploy degli ultimi aggiornamenti su Heroku.

Su Mac (da OSX 10.5 in su) sicuramente avete già Ruby installato. Per installare Git potete usare <a href="http://code.google.com/p/git-osx-installer/">questo installer</a>. Gli utenti Linux sapranno già come fare, mentre per Windows non saprei neanche da dove cominciare.

Per usare Heroku per hostare il vostro blog, prima avete bisogno di [crearvi un account](http://heroku.com) -- la versione base è gratis.
Su OSX e Linux dovete, poi, lanciare un terminale e installare la Gem di Heroku ( per una guida completa vi rimando alla [documentazione ufficiale](http://docs.heroku.com) ):
    :::terminal
    sudo gem install heroku

Una volta installato Heroku, potete procedere ad installare Toto ed un webserver per farlo funzionare - nel caso non ne abbiate già installato uno.
Io ho scelto Thin server:
:::terminal
    sudo gem install toto thin

Se tutto è andato a buon fine adesso siamo pronti per lanciare l'applicazione e cominciare a lavorare alla personalizzazione del nostro blog.
La prima cosa che vi serve sarà [Dorothy](http://github.com/cloudhead/dorothy), il template generico per toto -- contiene la struttura delle cartelle e il layout standard, oltre che il file di configurazione.
    :::terminal
    git clone git://github.com/cloudhead/dorothy.git mioblog

Questo comando copia il codice da github alla cartella <code>mioblog</code>
Quindi ora entriamo nella cartella <code>mioblog</code> e creiamo un nuovo progetto con Heroku.
    :::terminal
    cd mioblog
    heroku create mioblog

Questo è tutto! Per effettuare il deploy e vedere il tuo nuovo blog su mioblog.heroku.com
    :::terminal
    git push heroku master
    heroku open

Tutto questo può sembrare estremamente macchinoso, ma in realtà tutto quello che dovete fare è clonare Dorothy, inizializzare Heroku, fare il deploy.

###Migrare da Wordpress
Per migrare i vostri post da wordpress a toto vi è uno [script di Scott Stout](https://github.com/skout23/toto-import-from-wordpress) che converte un XML esportato da Wordpress in articoli di toto.
Potete addirittura importare i commenti se usate [Disqus](http:///www.disqus.com) come commenting system semplicemente installando il plugin Disqus su Wordpress e usando il loro tool di import.

###Creare un nuovo post
Tutti i post sono salvati nella cartella <code>/articles/</code> Per creare un nuovo post basta creare un nuovo file di testo nel seguente formato:
    :::text
    yyyy-mm-dd-post-permalink.txt
Quindi per creare un nuovo post il giorno 21 marzo 2011 intitolato "Il mio nuovo blog!", dovete creare un file nella cartella <code>/articles/</code> con il seguente filename: <code>2011-03-21-il-mio-nuovo-blog.txt</code>
Oppure usare lo script Rake incluso in Dorothy. Da terminale digitate:
    :::terminal
    rake new
Vi verrà chiesto il titolo da usare e verrà automaticamente creato il file corretto in <code>/articles/</code>

Un articolo contiene una prima parte in formato yaml in cui **dovete esplicitare** <code>title</code> e <code>date</code> (che devono corrispondere al filename) e poi potete aggiungere tutti i dati che volete. es:
    :::yaml
    title: 'Il mio nuovo blog!'
    date: 2011/03/21
    slug: blog-updates
    tags: blog, toto, ruby, rake

Subito dopo l'intestazione in yaml scrivete il vostro post.
Toto usa [Markdwon](http://daringfireball.net/projects/markdown/) per la formattazione del testo, ma se *volete* scrivere direttamente HTML no probs, l'interprete lo individua automaticamente.
Questo è tutto quello che dovete fare per scrivere un articolo. Volendo potete crearvi una cartella <code>/articles/draft/</code> per salvare le bozze, in quanto le sottocartelle non vengono considerate.
Quando siete pronti a pubblicare, basta effettuare il deploy su heroku:
    :::terminal 
    git add .
    git commit -a -m "written some new articles"
    git push heroku master

###Lanciare Toto in locale
Posizionatevi nella cartella corrispondente al blog creato, e lanciate il server che preferito (nel nostro esempio *thin*)
    :::terminal
    thin start
Verrà eseguito il Server Thin e troverete il vostro blog all'indirizzo 0.0.0.0:3000 (o comunque thin vi fornirà l'indirizzo corretto)

###Personalizzare il template
Toto conserva i template nella cartella <code>/templates/</code>, javascript e CSS e altri file simili in <code>/public/</code>.  
Il core dei vostri template lo trovate in <code>layout.rhtml</code> e se lo aprite troverete la riga  
    :::ruby
    <%= yeld %>
Che verrà sostituita con il contenuto della pagina richiesta, mentre tutto il codice attorno verrà visualizzato in ogni pagina.

Ho voluto usare toto come applicazione di base per questo blog per avvicinarmi dal basso a Ruby. Ho provato tempo fa ad approcciare Ruby on Rails ma c'è troppa carne al fuoco tutta assieme. Meglio cominciare dal basso e mettere le mani in piccole robe senza aiuto di framework esterni.  
Nei prossimi articoli passeremo a sporcarci le mani per aggiungere funzionalità al nostro blog hackerando il core del progetto.